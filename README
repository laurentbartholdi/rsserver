1. Download and install node.js (nodejs.org)
2. Install the ws package (https://github.com/websockets/ws)
3. In a terminal, run "node rsserver"
4. In a browser, go to http://127.0.0.1:1729/
5. In GAP create a TCP client in localhost, port 1728. 
For example, execute the following commands:
LoadPackage("scscp");
cs:=InputOutputTCPStream("localhost", 1728);
In the terminal where rsserver runs you should now read "tcp client connected".

If you want to run a browser part on a remote computer, launch node with the IP address of
the server as the second argument, for example:
node rsserver 192.168.178.33
GAP and node should always run in the same computer, so the first argument in 
InputOutputTCPStream should always be "localhost".
You can use other ports for the HTTP and TCP servers by specifying them 
as the third and the fourth argument respectively:
node rsserver 192.168.178.33 8080 1337


CANVAS UI

Click and drag to rotate the sphere.

For Moebius transformation, double-click somewhere on the sphere surface to add a reference point. (In current design the reference point for Moebius transformations looks like a green diamond) Double-click a reference point to remove it. Drag a reference point to apply the transformation moving this point to the new place and living the other reference points unchanged. It's also possible to use only two points for Moebius transformation: if you move one of the points, the second point and it's opposite will be unchanged. The button "Reset transformation" make the transformation applyed to the sphere's surface, identical. The button "Clear reference points" removes all reference points, but leaves the transformation unchanged.

Ctrl-click and drag to draw a line on the sphere's surface. The button "Clear drawing" removes all lines, drawn on the sphere's surface.

Shift-double-click to create a point on the sphere. (In current design a point looks like a pink ball with a flag with number on it) The point is dragable. Shift-double-click on a point to remove it.

"Submit" button sends to the server information about the canvas: surface image, transformation, rotation, arcs, points and lines. 

GRID AND LABELS ON THE SPHERE

There are two types of grid on the sphere: constant absolute value lines (red in current design) and constant real and imaginary part lines (green). Both grids has the lines that are always visible (0.1, 0.5, 1, 2, 10 absolute values, these labels are light red, -1, 0 and 1 for real and imaginary parts, green) and lines depending on transformation applyed ("dynamic grid"). All type of grid lines can have labels. Besides that there labels that are always present: 0, 1, i, -1, -i and infinity, they are also green. To show and hide grids and labels use "Grid and labels" control set.
One can show or hide grids and labels through user interface (a set of checkboxes "Grid and labels") or sending <config> through the server. For example, <config key="showGrid" value="false"/> hides all constant Re and Im part lines. 

When the Fatou and Julia sets of a rational function are drawn on the sphere's surface, the formula of this function is shown below the canvas and controls. 
Meanings of the colors are described in a legend. The numbers to show are read from the <cycle> entries of the <function>. Use 	"legendMarkerSize", "legendPosition" and "legendTextColor"
config values to change legend's appearance and "showLegend" to switch it on and off. "legendMarkerSize" is size of a colored square in pixels, "legendPosition" controls in which corner of the canvas legend is shown ("lt" for left-top, "rt", "lb" or "rb" for others).
 

CLIENT-SERVER COMMUNICATION

The information transfered between web-client, nodejs server and tcp-client is presented in xml format, described in rsserver/data/rsscp.dtd 
Web-client sends to tcp-client (through the server) an <updata> element, the tcp-client should send <downdata>. Both <updata> and <downdata> must have a "session" attribute. Every time a new web-client is connected to the server new session is created. Id for a new session (the value of a "session" attribute) is generated automatically unless the "session" variable is present in a query string of the URL. For example the URL http://127.0.0.1:1729/?session=s1 will open the session with ID "s1". The URL http://127.0.0.1:1729/ will open the session with a new ID.
Every session can have one or more browser window, each window has a unic (inside one session) ID. 
Every window has one <head> and any quantity of <canvas>, <text> and <button> elements. Each of those elements has a unic (inside the session) ID. A canvas object has one <rotation> and one <transform> elements, can have one <function> element and any quantity of <arc>, <line> and <point> elements. Each <arc>, <line> and <point> has a unic (inside the session) id. 

<downdata> element must have an "action" attribute (the value is "request" by default). Set it to "create" to add new elements to window or canvas, "populate" to add elements to canvas, to set it's rotation or transformation, or change configuration, and change a text on a button, "remove" to remove object from window or canvas, "request" to receive information about the given object. 
<updata> element has a "status" attribute. It can take an "info" value, when nothing is changed in web view, "updated" when something is changed in a given object, "created" or "removed" when object is created or removed, "button-click" when user clicks a button. 

<downdata> and <updata> must have an "object" attribute. (Except the "action" attribute of <downdata> value is "request". In this case the server sends an information about all windows of a given session. If "session" attribute is not present, the information about all open sessions is sent to tcp-server). The "object" attribute contains an ID of the given object (exsept if <downdata atcion="create"> and <updata status="created">, in this case "object" is the ID of the parent object). 

Examples. 

Start of the session:
Web->TCP <updata session='s1' status='created'><window id='w0'/></updata>

Setting title of the window
TCP->Web
<downdata action="create" object="w0" session="s1"><head>New title of the window</head></downdata>
Web->TCP
<updata status='created' session='s1' object='w0'><head id='head0'>New title of the window</head></updata>


Creating an object in a window
TCP->Web <downdata session='s1' obejct='w0' action='create'><button/></downdata>
Web->TCP <updata session="s1" object="w0" status="created"><button id="button0"/></updata>
Id of the button is generated automatically.

TCP->Web
<downdata action="create" object="w0" session="s1"><text>New text line</text></downdata>
Web->TCP
<updata status='created' session='s1' object='w0'><text id='text0'>New text line</text></updata>


Creating and populating a canvas
TCP->Web <downdata session='s1' obejct='w0' action='create'><canvas/></downdata>
Web->TCP <updata session="s1" object="w0" status="created"><canvas id="canvas0"/></updata>

TCP->Web <downdata session="s1" object="canvas0" action="populate">
		<function type="newton" degree="3"/>
		<point movable="true"><cn re="1", im="0"/></point>
		<config key="width" value="1000"/>
		<transform><cn re="0", im="0"/><cn re="1" im="0"/><cn re="1" im="0"/><cn re="0" im="0"/></transform>
</downdata>
Web->TCP
<updata status="updated" object="canvas0">
	<canvas id="canvas0">
		<rotation x="2" y="0" z="0.7" order="XYZ"/>
		<transform>
			<cn re="0" im="0"/>
			<cn re="1" im="0" r="1"/>
			<cn re="1" im="0" r="1"/>
			<cn re="0" im="0"/>
		</transform>
		<point id="canvas0UIpoint0" canvas="canvas0" movable="true">
			<cn re="1.0000000000000002" im="0" r="1.0000000000000002"/>
		</point>
		<function degree="3">
			<numer>
				<cn re="1" im="0"/>
				<cn re="0" im="0"/>
				<cn re="0" im="0"/>
				<cn re="2" im="0"/>
			</numer>
			<denom>
				<cn re="0" im="0"/>
				<cn re="0" im="0"/>
				<cn re="3" im="0"/>
				<cn re="0" im="0"/>
			</denom>
			<cycle length="1">
				<cn re="1" im="0"/>
			</cycle>
			<cycle length="1">
				<cn re="-0.4999999999999998" im="0.8660254037844387"/>
			</cycle>
			<cycle length="1">
				<cn re="-0.5000000000000004" im="-0.8660254037844385"/>
			</cycle>
		</function>
	</canvas>
</updata>

Adding some objects to canvas
TCP->Web
"<downdata action="populate" session="s1" object="canvas0">
	<point color="#ff6666" movable="false"><cn re="0" im="1"/></point>
	<point color="#6666ff" movable="false"><cn re="1" im="0"/></point>
	<point color="#66ff66" movable="false"><cn re="1" im="1"/></point>
	<arc type="transformation" color="#6666ff"><cn re="0" im="0"/><cn re="1" im="0"/><cn re="1" im="1"/><cn re="0" im="-1"/></arc>
</downdata>"
Web->TCP
<updata session="s1" status="created" object="canvas0">
	<point id="canvas0UIpoint1" canvas="canvas0" color="#ff6666" movable="false"><cn re="0" im="1" r="1" t="1.5707963267948966"/></point>
	<point id="canvas0UIpoint2" canvas="canvas0" color="#6666ff" movable="false"><cn re="1" im="0" r="1"/></point>
	<point id="canvas0UIpoint3" canvas="canvas0" color="#66ff66" movable="false"><cn re="1" im="1" r="1.4142135623730951" t="0.7853981633974482"/></point>
</updata>
<updata session="s1" status="created" object="canvas0">
	<arc id="canvas0UIarc4" canvas="canvas0" color="#6666ff" width="2">
		<sp x="0" y="0" z="-1"/>
		<sp x="0.6666666666666669" y="-0.3333333333333335" z="-0.6666666666666666"/>
		<sp x="1" y="0" z="0"/>
	</arc>
</updata>
<updata session="s1" status="updated" object="canvas0"/>


Another way to add objects to canvas (action="create" instead of "populate")
TCP->Web <downdata action="create" object="canvas0" session="s1"><point><cn re="0.5" im="0.5"/></point></downdata>
<updata status='created' object='canvas0' session='s1'>
	<point id='point0' canvas='canvas0'><cn re='0.5' im='0.5' r='0.7071067811865475'/></point>
</updata>
<updata status='updated' object='canvas0' session='s1'/>

TCP->Web
<downdata action="create" object="canvas0" session="s1">
	<arc type="points" id="arc0"><cn re="1" im="0.5"/><cn re="0.5" im="0.5"/><cn re="0" im="0.5"/></arc>
</downdata>
Web->TCP 
<updata status='created' object='canvas0' session='s1'>
	<arc id='arc0' canvas='canvas0' color='#333399' width='2'>
		<sp x='0.888888888888889' y='-0.11111111111111112' z='-0.4444444444444445'/>
		<sp x='0.5536365323582664' y='0.30450009279704654' z='-0.7750911453015731'/>
		<sp x='4.898587196589413e-17' y='0.6000000000000001' z='-0.8'/>
	</arc>
</updata>
<updata status='updated' object='canvas0' session='s1'/>

TCP->Web 
<downdata action="create" object="canvas0" session="s1">
	<line>
		<cn re="1" im="0.1"/><cn re="1.1" im="0.2"/><cn re="1.2" im="0.2"/><cn re="1.3" im="0.1"/><cn re="1.4" im="0"/>
	</line>
</downdata>
Web->TCP 
<updata status='created' object='canvas0' session='s1'>
	<line id='line0' canvas='canvas0'>
		<cn re='1' im='0.1'/><cn re='1.1' im='0.2'/><cn re='1.2' im='0.2'/><cn re='1.3' im='0.1'/><cn re='1.4' im='0'/>
	</line>
</updata>
<updata status='updated' object='canvas0' session='s1'/>


Remove an object
TCP->Web <downdata action="remove" object="line0" session="s1"></downdata>
Web->TCP <updata status='removed' object='line0' session='s1'/>

TCP->Web <downdata session="s1" action="remove" object="canvas0"/>
Web->TCP <updata session='s1' status='removed' object='canvas0'/>

Request information
TCP->Web <downdata action="request" session="s1"/>
Web->TCP <updata status='info' session='s1' object='w0'><window><button name='button0' id='button0'/></window></updata>


--------------------------------------------------------------------------
Actions on web UI
----------------------------------------------------------------------------

User clicks the button 'button0'
Web->TCP <updata session='s1' status='button-click' object='button0'/>

User has added a point: 
Web->TCP
<updata session="s1" status="created" object="canvas0">
	<point id="canvas0UIpoint1" canvas="canvas0">
		<cn re="1.3302203016807654" im="-1.3189376605521121" r="1.8732545484867626"/>
	</point>
</updata>

User has moved a point: 
Web->TCP 
<updata session="s1" status="updated" object="canvas0">
	<point id="canvas0UIpoint0" canvas="canvas0" movable="true">
		<cn re="1.2589972606891076" im="-0.17267385291220938" r="1.2707833654491327"/>
	</point>
</updata>

User has removed a point:
Web->TCP
<updata session="s1" status="removed" object="canvas0UIpoint0"/>

User has drawn a line
Web->TCP
<updata session="s1" status="created" object="canvas0UIline0">
	<line id="canvas0UIline0" canvas="canvas0">
		<cn re="0.16478563291654094" im="0.3004821811601285" r="0.34270081121942686" t="1.069179270233213"/>
		[all points of the line]
	</line>
</updata>

User has removed a line ("Clear drawings" button)
Web->TCP
<updata session="s1" status="removed" object="canvas0UIline0"/>
<updata session="s1" status="removed" object="canvas0UIline1"/>
(Ack is sent about each line separately)

User has rotated the sphere
Web->TCP 
<updata session="s1" status="updated" object="canvas0">
	<rotation x="1.8168817964372586" y="-0.34613175084056025" z="0.09053054958506236" order="XYZ"/>
</updata>

User has transformed the sphere
Web->TCP
<updata session="s1" status="updated" object="canvas0">
	<transform>
		<cn re="0.5523225030131864" im="-0.6112080888938083"/>
		<cn re="0.23396703696778925" im="0.3708035578640365" r="0.438447092489065"/>
		<cn re="-0.38253997110311105" im="-0.21424057370289518" r="0.438447092489065"/>
		<cn re="1.5153790280031172" im="-1.6260564820133163"/>
	</transform>
</updata>
-----------------------------------------------------------------------------------------------------------------
